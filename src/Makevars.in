PKG_CPPFLAGS=-Iinclude @PTHREAD_CFLAGS@
PKG_LIBS=glm/libglm.a external/libexternal.a stan_files/cont_binary_mlm.o $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) @PTHREAD_LIBS@

# from rstan.package.skeleton
STANHEADERS_SRC = `"$(R_HOME)/bin$(R_ARCH_BIN)/Rscript" --vanilla -e "cat(system.file('include', 'src', package = 'StanHeaders'))"`
STAN_CPPFLAGS = -I"../inst/include" -I"$(STANHEADERS_SRC)" -DBOOST_RESULT_OF_USE_TR1 -DBOOST_NO_DECLTYPE -DBOOST_DISABLE_ASSERTS -DEIGEN_NO_DEBUG -DBOOST_MATH_OVERFLOW_ERROR_POLICY=ignore_error

#.PHONY : all glm/libglm.a external/libexternal.a Modules.o clean
.PHONY : all glm/libglm.a external/libexternal.a stan_files/cont_binary_mlm.o clean

all : $(SHLIB)

$(SHLIB) : glm/libglm.a external/libexternal.a stan_files/cont_binary_mlm.o
	@if test -e "/usr/bin/install_name_tool" && test -e "/usr/local/clang4/lib/libc++.1.dylib" && test -e "/usr/lib/libc++.1.dylib"; then /usr/bin/install_name_tool -change /usr/local/clang4/lib/libc++.1.dylib /usr/lib/libc++.1.dylib $(SHLIB); fi

stan_files/cont_binary_mlm.cc: stan_files/cont_binary_mlm.stan
	"$(R_HOME)/bin$(R_ARCH_BIN)/Rscript" -e "source(file.path('..', 'tools', 'make_cc.R')); make_cc(commandArgs(TRUE))" stan_files/cont_binary_mlm.stan

stan_files/cont_binary_mlm.o : stan_files/cont_binary_mlm.cc
	$(CXX) $(R_XTRA_CPPFLAGS) $(PKG_CPPFLAGS) $(STAN_CPPFLAGS) $(CPPFLAGS) \
	  $(CLINK_CPPFLAGS) $(CXXPICFLAGS) $(CXXFLAGS) -c stan_files/cont_binary_mlm.cc -o stan_files/cont_binary_mlm.o

glm/libglm.a :
	@(cd glm && $(MAKE) libglm.a \
	  CC="$(CC)" R_XTRA_CPPFLAGS="$(R_XTRA_CPPFLAGS)" \
	  CPPFLAGS="@PTHREAD_CFLAGS@ $(CPPFLAGS)" \
	  CFLAGS="$(R_XTRA_CFLAGS) $(CPICFLAGS) $(CFLAGS)" \
	  AR="$(AR)" ARFLAGS="$(ARFLAGS)" RANLIB="$(RANLIB)" \
	  INST_DIR="$(INST_DIR)")


external/libexternal.a :
	@(cd external && $(MAKE) libexternal.a \
	  CC="$(CC)" R_XTRA_CPPFLAGS="$(R_XTRA_CPPFLAGS)" \
	  CPPFLAGS="@PTHREAD_CFLAGS@ $(CPPFLAGS)" \
	  CFLAGS="$(R_XTRA_CFLAGS) $(CPICFLAGS) $(CFLAGS)" \
	  AR="$(AR)" ARFLAGS="$(ARFLAGS)" RANLIB="$(RANLIB)" \
	  INST_DIR="$(INST_DIR)")

clean :
	@(cd glm && $(MAKE) clean)
	@(cd external && $(MAKE) clean)
	rm -f *.so *.dll *.o
	rm -f stan_files/*.o
	rm -f stan_files/*.so
	rm -f stan_files/*.cc
	rm -f stan_files/*.hpp
